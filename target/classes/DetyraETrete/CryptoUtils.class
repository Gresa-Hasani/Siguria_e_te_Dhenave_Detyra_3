//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package DetyraETrete;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.security.KeyPair;
import java.security.PublicKey;
import java.security.Security;
import java.util.Arrays;
import java.util.Base64;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

public class Client {
    private static final String SERVER_ADDRESS = "localhost";
    private static final int SERVER_PORT = 8080;
    private static KeyPair clientKeyPair;

    public Client() {
    }

    public static void main(String[] args) throws Exception {
        clientKeyPair = CryptoUtils.generateKeyPair();
        Socket serverSocket = new Socket("localhost", 8080);

        label122: {
            label121: {
                try {
                    BufferedReader in;
                    label118: {
                        label126: {
                            in = new BufferedReader(new InputStreamReader(serverSocket.getInputStream()));

                            try {
                                PrintWriter out = new PrintWriter(serverSocket.getOutputStream(), true);

                                label112: {
                                    label111: {
                                        try {
                                            BufferedReader consoleIn = new BufferedReader(new InputStreamReader(System.in));

                                            label107: {
                                                label106: {
                                                    try {
                                                        System.out.println("Welcome to Simplified SSH Client.");
                                                        System.out.println("Attempting to connect to the SSH server...");
                                                        String serverPubKeyStr = in.readLine();
                                                        PublicKey serverPublicKey = CryptoUtils.getPublicKeyFromString(serverPubKeyStr);
                                                        out.println(Base64.getEncoder().encodeToString(clientKeyPair.getPublic().getEncoded()));
                                                        byte[] sharedSecret = CryptoUtils.generateSharedSecret(clientKeyPair.getPrivate(), serverPublicKey);
                                                        String signature = in.readLine();
                                                        boolean isVerified = CryptoUtils.verifySignature(serverPublicKey, "Server Authentication", signature);
                                                        if (isVerified) {
                                                            String hmac = in.readLine();
                                                            String expectedHmac = CryptoUtils.generateHMAC("Server Authentication", sharedSecret);
                                                            if (!hmac.equals(expectedHmac)) {
                                                                System.out.println("HMAC verification failed. Exiting...");
                                                                break label107;
                                                            }

                                                            out.println("Handshake Successful");
                                                            System.out.println("Handshake successful. Secure channel established. You can now begin your session.");

                                                            while(true) {
                                                                String userInput;
                                                                if ((userInput = consoleIn.readLine()) == null) {
                                                                    break label106;
                                                                }

                                                                String encryptedUserInput = CryptoUtils.encrypt(userInput, Arrays.copyOf(sharedSecret, 16));
                                                                out.println(encryptedUserInput);
                                                                if ("exit".equalsIgnoreCase(userInput)) {
                                                                    break label106;
                                                                }

                                                                String encryptedServerResponse = in.readLine();
                                                                String decryptedServerResponse = CryptoUtils.decrypt(encryptedServerResponse, Arrays.copyOf(sharedSecret, 16));
                                                                System.out.println("Server: " + decryptedServerResponse);
                                                            }
                                                        }

                                                        System.out.println("Server verification failed. Exiting...");
                                                    } catch (Throwable var20) {
                                                        try {
                                                            consoleIn.close();
                                                        } catch (Throwable var19) {
                                                            var20.addSuppressed(var19);
                                                        }

                                                        throw var20;
                                                    }

                                                    consoleIn.close();
                                                    break label112;
                                                }

                                                consoleIn.close();
                                                break label111;
                                            }

                                            consoleIn.close();
                                        } catch (Throwable var21) {
                                            try {
                                                out.close();
                                            } catch (Throwable var18) {
                                                var21.addSuppressed(var18);
                                            }

                                            throw var21;
                                        }

                                        out.close();
                                        break label118;
                                    }

                                    out.close();
                                    break label126;
                                }

                                out.close();
                            } catch (Throwable var22) {
                                try {
                                    in.close();
                                } catch (Throwable var17) {
                                    var22.addSuppressed(var17);
                                }

                                throw var22;
                            }

                            in.close();
                            break label121;
                        }

                        in.close();
                        break label122;
                    }

                    in.close();
                } catch (Throwable var23) {
                    try {
                        serverSocket.close();
                    } catch (Throwable var16) {
                        var23.addSuppressed(var16);
                    }

                    throw var23;
                }

                serverSocket.close();
                return;
            }

            serverSocket.close();
            return;
        }

        serverSocket.close();
    }

    static {
        Security.addProvider(new BouncyCastleProvider());
    }
}
